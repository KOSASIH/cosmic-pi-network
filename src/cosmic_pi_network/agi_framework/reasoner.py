import numpy as np

class Reasoner:
    def __init__(self, knowledge_graph):
        self.knowledge_graph = knowledge_graph
        self.rules = []  # Initialize rules

    def reason(self, knowledge_graph):
        # Apply rules to knowledge graph
        for rule in self.rules:
            rule.apply(knowledge_graph)

    def get_action(self):
        # Determine action based on knowledge graph
        return np.random.choice(["action1", "action2", "action3"])

    def learn(self, feedback):
        # Update rules based on feedback
        pass

    def get_new_knowledge(self):
        # Return new knowledge generated by reasoner
        return []

    def __str__(self):
        return f"Reasoner(knowledge_graph={self.knowledge_graph}, rules={self.rules})"

    def __repr__(self):
        return repr(self.rules)
